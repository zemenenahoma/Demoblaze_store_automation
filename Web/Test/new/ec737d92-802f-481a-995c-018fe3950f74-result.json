{"name": "test_login_invalid_user_name11_and_empty_password", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Please fill out Username and Password.\nMessage: unexpected alert open: {Alert text : Please fill out Username and Password.}\n  (Session info: chrome=110.0.5481.96)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00F437D3]\n\t(No symbol) [0x00ED8B81]\n\t(No symbol) [0x00DDB36D]\n\t(No symbol) [0x00E418E5]\n\t(No symbol) [0x00E2B216]\n\t(No symbol) [0x00E00D97]\n\t(No symbol) [0x00E0253D]\n\tGetHandleVerifier [0x011BABF2+2510930]\n\tGetHandleVerifier [0x011E8EC1+2700065]\n\tGetHandleVerifier [0x011EC86C+2714828]\n\tGetHandleVerifier [0x00FF3480+645344]\n\t(No symbol) [0x00EE0FD2]\n\t(No symbol) [0x00EE6C68]\n\t(No symbol) [0x00EE6D4B]\n\t(No symbol) [0x00EF0D6B]\n\tBaseThreadInitThunk [0x762A7D69+25]\n\tRtlInitializeExceptionChain [0x7710BB9B+107]\n\tRtlClearBits [0x7710BB1F+191]", "trace": "self = <Web.Test.test_login.TestLogin object at 0x0000013CD9910950>\n\n    @pytest.mark.sanity\n    @allure.description(\"invalid username and empty password\")\n    def test_login_invalid_user_name11_and_empty_password(self):\n        self.driver = super().init()\n    \n        self.lp = LoginPages(self.driver)\n    \n        self.lp.click_on_login_text()\n    \n        self.lp.set_user_name(\"sadjjcjhh@jhhjfg.com\")\n        self.lp.set_user_password(\"\")\n        self.lp.click_login()\n    \n>       assert self.driver.title == \"STORE\"\n\ntest_login.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:460: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000013CD9ADD510>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Please fill out Username and Password.\"},\"error\":\"unexpected alert...dInitThunk [0x762A7D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7710BB9B+107]\\\\n\\\\tRtlClearBits [0x7710BB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Please fill out Username and Password.\nE           Message: unexpected alert open: {Alert text : Please fill out Username and Password.}\nE             (Session info: chrome=110.0.5481.96)\nE           Stacktrace:\nE           Backtrace:\nE           \t(No symbol) [0x00F437D3]\nE           \t(No symbol) [0x00ED8B81]\nE           \t(No symbol) [0x00DDB36D]\nE           \t(No symbol) [0x00E418E5]\nE           \t(No symbol) [0x00E2B216]\nE           \t(No symbol) [0x00E00D97]\nE           \t(No symbol) [0x00E0253D]\nE           \tGetHandleVerifier [0x011BABF2+2510930]\nE           \tGetHandleVerifier [0x011E8EC1+2700065]\nE           \tGetHandleVerifier [0x011EC86C+2714828]\nE           \tGetHandleVerifier [0x00FF3480+645344]\nE           \t(No symbol) [0x00EE0FD2]\nE           \t(No symbol) [0x00EE6C68]\nE           \t(No symbol) [0x00EE6D4B]\nE           \t(No symbol) [0x00EF0D6B]\nE           \tBaseThreadInitThunk [0x762A7D69+25]\nE           \tRtlInitializeExceptionChain [0x7710BB9B+107]\nE           \tRtlClearBits [0x7710BB1F+191]\n\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:244: UnexpectedAlertPresentException"}, "description": "invalid username and empty password", "start": 1676679497482, "stop": 1676679503696, "uuid": "b57be9c9-67e5-4b99-957a-8f0c72a58f5c", "historyId": "7b796d3ba5287d988ce9c227721f6fd3", "testCaseId": "c343ba0468b428570b986555ac2e88ee", "fullName": "test_login.TestLogin#test_login_invalid_user_name11_and_empty_password", "labels": [{"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "LAPTOP-P10URGCA"}, {"name": "thread", "value": "20680-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}