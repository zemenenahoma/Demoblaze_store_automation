{"name": "test_cart_page_with_empty_user_credit_card", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Please fill out Name and Creditcard.\nMessage: unexpected alert open: {Alert text : Please fill out Name and Creditcard.}\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00926643]\n\t(No symbol) [0x008BBE21]\n\t(No symbol) [0x007BDA9D]\n\t(No symbol) [0x008273A5]\n\t(No symbol) [0x0080FB76]\n\t(No symbol) [0x007E49C1]\n\t(No symbol) [0x007E5E5D]\n\tGetHandleVerifier [0x00B9A142+2497106]\n\tGetHandleVerifier [0x00BC85D3+2686691]\n\tGetHandleVerifier [0x00BCBB9C+2700460]\n\tGetHandleVerifier [0x009D3B10+635936]\n\t(No symbol) [0x008C4A1F]\n\t(No symbol) [0x008CA418]\n\t(No symbol) [0x008CA505]\n\t(No symbol) [0x008D508B]\n\tBaseThreadInitThunk [0x752C7D69+25]\n\tRtlInitializeExceptionChain [0x772FBB9B+107]\n\tRtlClearBits [0x772FBB1F+191]", "trace": "self = <Web.Test.test_cart.TestCartPage object at 0x000001D172071D10>\n\n    @allure.description(\"empty card\")\n    @pytest.mark.sanity\n    def test_cart_page_with_empty_user_credit_card(self):\n        self.driver = super().init()\n        cart = CartPage(self.driver)\n        cart.cart_page()\n        cart.place_order()\n        cart.fill_name_to_purchase(\"Zemene Abinet\")\n        cart.fill_country_to_purchase(\"Ethiopia\")\n        cart.fill_city_to_purchase(\"Gondar\")\n        cart.fill_credit_card_to_purchase(\"\")\n        cart.fill_month_to_purchase(\"March\")\n        cart.fill_year_to_purchase(\"2023\")\n        cart.click_to_purchase()\n>       cart.click_ok_buttons()\n\ntest_cart.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\Pages\\cart_page.py:58: in click_ok_buttons\n    ok = self.driver.find_element(By.XPATH, self.ok_button)\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D1721202D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Please fill out Name and Creditcard.\"},\"error\":\"unexpected alert o...dInitThunk [0x752C7D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x772FBB9B+107]\\\\n\\\\tRtlClearBits [0x772FBB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Please fill out Name and Creditcard.\nE           Message: unexpected alert open: {Alert text : Please fill out Name and Creditcard.}\nE             (Session info: chrome=109.0.5414.120)\nE           Stacktrace:\nE           Backtrace:\nE           \t(No symbol) [0x00926643]\nE           \t(No symbol) [0x008BBE21]\nE           \t(No symbol) [0x007BDA9D]\nE           \t(No symbol) [0x008273A5]\nE           \t(No symbol) [0x0080FB76]\nE           \t(No symbol) [0x007E49C1]\nE           \t(No symbol) [0x007E5E5D]\nE           \tGetHandleVerifier [0x00B9A142+2497106]\nE           \tGetHandleVerifier [0x00BC85D3+2686691]\nE           \tGetHandleVerifier [0x00BCBB9C+2700460]\nE           \tGetHandleVerifier [0x009D3B10+635936]\nE           \t(No symbol) [0x008C4A1F]\nE           \t(No symbol) [0x008CA418]\nE           \t(No symbol) [0x008CA505]\nE           \t(No symbol) [0x008D508B]\nE           \tBaseThreadInitThunk [0x752C7D69+25]\nE           \tRtlInitializeExceptionChain [0x772FBB9B+107]\nE           \tRtlClearBits [0x772FBB1F+191]\n\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:244: UnexpectedAlertPresentException"}, "description": "empty card", "start": 1675552995682, "stop": 1675553010110, "uuid": "9efc6838-b4a1-4244-b6ee-d4df2d242926", "historyId": "2425331b01529d9f7d72fa4da49bd6c7", "testCaseId": "915660d006afcc9913238f05b651aad6", "fullName": "test_cart.TestCartPage#test_cart_page_with_empty_user_credit_card", "labels": [{"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_cart"}, {"name": "subSuite", "value": "TestCartPage"}, {"name": "host", "value": "LAPTOP-P10URGCA"}, {"name": "thread", "value": "13580-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cart"}]}